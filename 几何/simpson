int w,t,v;
struct unb{
    double x,l,v;
    void read(){
        scanf("%lf%lf%lf",&x,&l,&v);
    }
}ub[15];
double ans;
double d[15];
Point line[15];
double f(double now){
    for(int i=1;i<=n;i++){
        if(cmp(ub[i].l,w)>=0){
            line[i].x=ub[i].x;
            line[i].y=ub[i].x+ub[i].l;
            continue;
        }
        double dis=fmod(now*ub[i].v,2*(w-ub[i].l));
        double tmp=ub[i].x+dis;
        if(tmp<=0)
            tmp+=2*(w-ub[i].l);
        tmp=fmod(tmp+ub[i].x,2*(w-ub[i].l));
        if(tmp>=w-ub[i].l)
            line[i].x=2*(w-ub[i].l)-tmp;
        else
            line[i].x=tmp;
        line[i].y=line[i].x+ub[i].l;
    }
    sort(line+1,line+1+n);
    double len=0;
    double pre=-1;
    double tmplen=0;
    for(int i=1;i<=n;i++){
        if(line[i].x>pre+tmplen){
            len+=tmplen;
            pre=line[i].x;
            tmplen=line[i].y-line[i].x;
        }else{
            tmplen=max(tmplen,line[i].y-pre);
        }
    }
    return w-tmplen-len;
}
double simpson(double a,double b){
    return (b-a)*(f(a)+f(b)+4*f((a+b)/2))/6;
}
double simpson(double l,double r,double now){
    double mid=(l+r)/2;
    double ls=simpson(l,mid);
    double rs=simpson(mid,r);
    if(cmp(rs+ls,now)==0) return ls+rs;
    return simpson(l,mid,ls)+simpson(mid,r,rs);
}
void solve(){

    printf("%.2f\n",simpson(0,t,simpson(0,t))*v);
}
