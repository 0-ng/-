struct Point{
    double x,y;
    Point(){}
    Point(double a, double b):x(a),y(b){}
    double len(){return sqrt(x*x+y*y);}
    double norm(){return x*x+y*y;}
    double disToPoint(Point p){return sqrt((x-p.x)*(x-p.x)+(y-p.y)*(y-p.y));}
    double disToLine(Line l);
    double disToSegment(Line l);
    bool onSegment(Line l);
    Point project(Line l);//投影
    Point rotleft(){
        return Point(-y,x);
        //`逆时针旋转90度`
    }
    Point trunc(double r){
        double l = len();
        if(!sgn(l))return *this;
        r /= l;
        return Point(x*r,y*r);
        //`化为长度为r的向量`
    }
    double rad(Point a,Point b){
        Point p = *this;
        return fabs(atan2( fabs((a-p)^(b-p)),(a-p)*(b-p) ));
        //`计算pa  和  pb 的夹角`
        //`就是求这个点看a,b 所成的夹角`
        //`测试 LightOJ1203`
    }
    void read(){scanf("%lf%lf",&x,&y);}
    Point operator+(const Vector v)const{return {x+v.x,y+v.y};}
    Vector operator-(const Point p)const{return {x-p.x,y-p.y};}
    double operator^(const Vector v)const{return x*v.y-y*v.x;}//叉乘
    double operator*(const Vector v)const{return x*v.x+y*v.y;}//点乘
    Vector operator*(const double d)const{return {x*d,y*d};}
    Vector operator/(const double d)const{return {x/d,y/d};}
    bool operator==(const Point p)const{return cmp(x,p.x)==0&&cmp(y,p.y)==0;}
    bool operator<(const Point p)const{if(cmp(x,p.x)==0) return y<p.y;return x<p.x;}
};
struct Line{
    Line(){}
    Line(Point a,Point b){s=a;e=b;ang=atan2(e.y-s.y,e.x-s.x);}
    Point point(double t){return s + (e - s)*t;}//返回点P = v + (p - v)*t
    bool inter(Line l){
        return
                max(s.x,e.x)>=min(l.s.x,l.e.x)&&
                max(l.s.x,l.e.x)>=min(s.x,e.x)&&
                max(s.y,e.y)>=min(l.s.y,l.e.y)&&
                max(l.s.y,l.e.y)>=min(s.y,e.y)&&
                sgn((l.s-s)^(e-s))*sgn((e-s)^(l.e-s))>=0&&
                sgn((s-l.s)^(l.e-l.s))*sgn((l.e-l.s)^(e-l.s))>=0;
    }//线段与线段
    bool segLineInt(Line l){return sgn((e-s)^(l.e-s))*sgn((e-s)^(l.s-s))<=0;}//直线(主)与线段
    Point operator &(Line &b){
        double t=((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));
        return s+(e-s)*t;
    }
    Point s,e;
    double ang;
};
struct Circle{
    Circle(){}
    Circle(Point pp, double rr):p(pp), r(rr) {}
    Point point(double d){ return Point(p.x + cos(d)*r, p.y + sin(d)*r);}//通过圆心角求坐标
    bool contain(Point p){return cmp(r,p.disToPoint(p))>=0;}
    Circle(Point a,Point b,Point c){
        Line u = Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));
        Line v = Line((b+c)/2,((b+c)/2)+((c-b).rotleft()));
        p = u&v;
        r = p.disToPoint(a);
        //`三角形的外接圆`
        //`需要Point的+ /  rotate()  以及Line的crosspoint()`
        //`利用两条边的中垂线得到圆心`
        //`测试：UVA12304`
    }
    Circle(Point a,Point b,Point c,bool t){
        Line u,v;
        double m = atan2(b.y-a.y,b.x-a.x), n = atan2(c.y-a.y,c.x-a.x);
        u.s = a;
        u.e = u.s + Point(cos((n+m)/2),sin((n+m)/2));
        v.s = b;
        m = atan2(a.y-b.y,a.x-b.x) , n = atan2(c.y-b.y,c.x-b.x);
        v.e = v.s + Point(cos((n+m)/2),sin((n+m)/2));
        p = u&v;
        r = p.disToSegment(Line(a,b));
        //`三角形的内切圆`
        //`参数bool t没有作用，只是为了和上面外接圆函数区别`
        //`测试：UVA12304`
    }
    int relation(Point b){
        double dst = b.disToPoint(p);
        if(sgn(dst-r) < 0)return 2;
        else if(sgn(dst-r)==0)return 1;
        return 0;
        //`点和圆的关系`
        //`0 圆外`
        //`1 圆上`
        //`2 圆内`
    }
    int relationline(Line v){
        double dst = p.disToLine(v);
        if(sgn(dst-r) < 0)return 2;
        else if(sgn(dst-r) == 0)return 1;
        return 0;
        //`直线和圆的关系`
        //`比较的是圆心到直线的距离和半径的关系`
    }
    double areatriangle(Point a,Point b){
        if(sgn((p-a)^(p-b)) == 0)return 0.0;
        Point q[5];
        int len = 0;
        q[len++] = a;
        Line l(a,b);
        Point p1,p2;
        if(pointcrossline(l,q[1],q[2])==2){
            if(sgn((a-q[1])*(b-q[1]))<0)q[len++] = q[1];
            if(sgn((a-q[2])*(b-q[2]))<0)q[len++] = q[2];
        }
        q[len++] = b;
        if(len == 4 && sgn((q[0]-q[1])*(q[2]-q[1]))>0)swap(q[1],q[2]);
        double res = 0;
        for(int i = 0;i < len-1;i++){
            if(relation(q[i])==0||relation(q[i+1])==0){
                double arg = p.rad(q[i],q[i+1]);
                res += r*r*arg/2.0;
            }
            else{
                res += fabs((q[i]-p)^(q[i+1]-p))/2.0;
            }
        }
        return res;
        //`求圆和三角形pab的相交面积`
        //`测试：POJ3675 HDU3982 HDU2892`
    }
    int pointcrossline(Line v,Point &p1,Point &p2){
        if(!(*this).relationline(v))return 0;
        Point a = p.project(v);
        double d = p.disToLine(v);
        d = sqrt(r*r-d*d);
        if(sgn(d) == 0){
            p1 = a;
            p2 = a;
            return 1;
        }
        p1 = a + (v.e-v.s).trunc(d);
        p2 = a - (v.e-v.s).trunc(d);
        return 2;
        //`求直线和圆的交点，返回交点个数`
    }
    double areacircle(Point* pp,int n){
        double ans = 0;
        for(int i = 1;i <= n;i++){
            int j = (i%n+1);
            if(sgn( (pp[j]-p)^(pp[i]-p) ) >= 0)
                ans += areatriangle(pp[i],pp[j]);
            else ans -= areatriangle(pp[i],pp[j]);
        }
        return fabs(ans);
        //`多边形和圆交的面积`
        //`测试：POJ3675 HDU3982 HDU2892`
    }
    void read(){scanf("%lf%lf%lf",&p.x,&p.y,&r);}
    Point p;
    double r;
};
double Point::disToLine(Line l){
    Vector v1=l.e-l.s,v2=*this-l.s;
    return fabs((v1^v2))/(v1.len());
}
double Point::disToSegment(Line l){
    if(l.s==l.e) return (*this-l.s).len();
    Vector v1 = l.e-l.s, v2 = *this-l.s, v3 = *this-l.e;
    if(sgn(v1*v2) < 0) return v2.len();
    if(sgn(v1*v3) > 0) return v3.len();
    return disToLine(l);
}
bool Point::onSegment(Line l){
    Vector v1=l.s-*this;
    Vector v2=l.e-*this;
    return sgn(v1^v2)==0&&sgn(v1*v2)<=0;
}
Point Point::project(Line l) {//投影 对于给定的三个点p1、p2、p，从点p向通过
//p1、p2的直线引一条垂线，求垂足x的坐标。（点p在直线p1p2上的投影）
    Vector base = l.e - l.s;
    double r = (*this-l.s)*(base)/base.norm();
    return l.s+base*r;
}
