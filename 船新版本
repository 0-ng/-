#include<map>
#include<set>
#include<cmath>
#include<queue>
#include<stack>
#include<ctime>
#include<vector>
#include<cstdio>
#include<vector>
#include<string>
#include<bitset>
#include<cstdlib>
#include<iomanip>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAXN=1e5+10;
const double EPS=1e-8;
const double PI=acos(-1);
inline int sgn(double a){ return a < -EPS ? -1 : a > EPS; }
inline int cmp(double a, double b){ return sgn(a-b); }
long long mod=1e9+7;
//int n,m,T;
struct Point;
struct Line;
typedef Point Vector;

struct Point{
    double x,y;
    Point(){}
    Point(double a, double b):x(a),y(b){}
    double len(){return sqrt(x*x+y*y);}
    double len2(){return x*x+y*y;}
    double disToPoint(Point p){return sqrt((x-p.x)*(x-p.x)+(y-p.y)*(y-p.y));}
    Point rotLeft(){
        //`逆时针旋转90度`
        return Point(-y,x);
    }
    Point rotRight(){
        //`顺时针旋转90度`
        return Point(y,-x);
    }
    Point trunc(double r){
        //`化为长度为r的向量`
        double l = len();
        if(!sgn(l))return *this;
        r /= l;
        return Point(x*r,y*r);
    }
    double rad(Point a,Point b){//返回弧度角
        Point p = *this;
        return fabs(atan2( fabs((a-p)^(b-p)),(a-p)*(b-p) ));
        //acos(((a-p)*(b-p))/(a-p).len()/(b-p).len()));
        //`计算pa  和  pb 的夹角`
        //`就是求这个点看a,b 所成的夹角`
        //`测试 LightOJ1203`
    }
    double rad(Vector b){//返回弧度角
        return fabs(atan2( fabs((*this)^(b)),(*this)*(b) ));
        //`计算*this和  b 的夹角`
    }
    Point rotate(Point p,double angle){
        //`绕着p点逆时针旋转angle`
        Point v = (*this) - p;
        double c = cos(angle), s = sin(angle);
        return Point(p.x + v.x*c - v.y*s,p.y + v.x*s + v.y*c);
    }
    Vector rotate(double angle){
        //~向量逆时针旋转angle`
        double c = cos(angle), s = sin(angle);
        return Vector(x*c-y*s, x*s+y*c);
    }
    void read(){scanf("%lf%lf",&x,&y);}
    Point operator+(const Vector v)const{return {x+v.x,y+v.y};}
    Vector operator-(const Point p)const{return {x-p.x,y-p.y};}
    double operator^(const Vector v)const{return x*v.y-y*v.x;}//叉乘
    double operator*(const Vector v)const{return x*v.x+y*v.y;}//点乘
    Vector operator*(const double d)const{return {x*d,y*d};}
    Vector operator/(const double d)const{return {x/d,y/d};}
    bool operator==(const Point p)const{return cmp(x,p.x)==0&&cmp(y,p.y)==0;}
    bool operator<(const Point p)const{if(cmp(x,p.x)==0) return y<p.y;return x<p.x;}
};
struct Line{
    Line(){}
    Line(Point a,Point b){s=a;e=b;}
    Line(Point p,double angle){
        //`根据一个点和倾斜角angle确定直线,0<=angle<pi`
        s = p;
        if(sgn(angle-PI/2) == 0)
            e = (s + Point(0,1));
        else
            e = (s + Point(1,tan(angle)));
    }
    Line(double a,double b,double c) {
        //ax+by+c=0
        if (sgn(a) == 0) {
            s = Point(0, -c / b);
            e = Point(1, -c / b);
        } else if (sgn(b) == 0) {
            s = Point(-c / a, 0);
            e = Point(-c / a, 1);
        } else {
            s = Point(0, -c / b);
            e = Point(1, (-c - a) / b);
        }
    }
    double getAngle(){
        //`返回直线倾斜角 0<=angle<pi`
        double k = atan2(e.y-s.y,e.x-s.x);
        if(sgn(k) < 0)k += PI;
        if(sgn(k-PI) == 0)k -= PI;
        return k;
    }
    double len(){return s.disToPoint(e);}
    int relation(Point p){
        //`点和直线关系`
        int c = sgn((p-s)^(e-s));
        if(c < 0)return 1;
        else if(c > 0)return 2;
        else return 3;
        //`1 在左侧`//`2 在右侧`//`3 在直线上`
    }
    bool pointOnSeg(Point p){
        // 点在线段上的判断
        return sgn((p-s)^(e-s)) == 0 && sgn((p-s)*(p-e)) <= 0;
    }
    bool parallel(Line v){//checked
        //`两向量平行(对应直线平行或重合)`
        return sgn((e-s)^(v.e-v.s)) == 0;
    }
    Point point(double t){return s + (e - s)*t;}//返回点P = v + (p - v)*t
    int segCrossSeg(Line v){
        //`两线段相交判断`
        int d1 = sgn((e-s)^(v.s-s));
        int d2 = sgn((e-s)^(v.e-s));
        int d3 = sgn((v.e-v.s)^(s-v.s));
        int d4 = sgn((v.e-v.s)^(e-v.s));
        if( (d1^d2)==-2 && (d3^d4)==-2 )return 2;
        return (d1==0 && sgn((v.s-s)*(v.s-e))<=0) ||
               (d2==0 && sgn((v.e-s)*(v.e-e))<=0) ||
               (d3==0 && sgn((s-v.s)*(s-v.e))<=0) ||
               (d4==0 && sgn((e-v.s)*(e-v.e))<=0);
        //`2 规范相交`//`1 非规范相交`//`0 不相交`
    }
    int lineCrossSeg(Line v){
        //`直线和线段相交判断`
        //`-*this line   -v seg`
        int d1 = sgn((e-s)^(v.s-s));
        int d2 = sgn((e-s)^(v.e-s));
        if((d1^d2)==-2) return 2;
        return (d1==0||d2==0);
        //`2 规范相交`//`1 非规范相交`//`0 不相交`
    }
    int lineCrossLine(Line v){
        //`两直线关系`
        if((*this).parallel(v))
            return v.relation(s)==3;
        return 2;
        //`0 平行`//`1 重合`//`2 相交`
    }
    Point crossPoint(Line v){//checked
        //`求两直线的交点`
        //`要保证两直线不平行或重合`
        double a1 = (v.e-v.s)^(s-v.s);
        double a2 = (v.e-v.s)^(e-v.s);
        return Point((s.x*a2-e.x*a1)/(a2-a1),(s.y*a2-e.y*a1)/(a2-a1));
    }
    double disPointToLine(Point p){//checked
        //点到直线的距离
        return fabs((p-s)^(e-s))/len();
    }
    double disPointToSeg(Point p){
        //点到线段的距离
        if(sgn((p-s)*(e-s))<0 || sgn((p-e)*(s-e))<0)
            return min(p.disToPoint(s),p.disToPoint(e));
        return disPointToLine(p);
    }
    double disSegToSeg(Line v){
        //`返回线段到线段的距离` //`前提是两线段不相交，相交距离就是0了`
        return min(min(disPointToSeg(v.s),disPointToSeg(v.e)),min(v.disPointToSeg(s),v.disPointToSeg(e)));
    }
    Point lineProg(Point p){//checked
        //`返回点p在直线上的投影`
        return s + ( ((e-s)*((e-s)*(p-s)))/((e-s).len2()) );
    }
    Point symmetryPoint(Point p){
        //`返回点p关于直线的对称点`
        Point q = lineProg(p);
        return Point(2*q.x-p.x,2*q.y-p.y);
    }
    Point s,e;
    double ang;
};
struct Circle{
    Circle(){}
    Circle(Point _p, double _r):p(_p), r(_r) {}
    Circle(double x,double y,double _r){
        p=Point(x,y);
        r=_r;
    }
    Circle(Point a,Point b,Point c){
        //`三角形的外接圆`
        Line u = Line((a+b)/2,((a+b)/2)+((b-a).rotLeft()));
        Line v = Line((b+c)/2,((b+c)/2)+((c-b).rotLeft()));
        p = u.crossPoint(v);
        r = p.disToPoint(a);
        //`需要Point的+ /  rotate()  以及Line的crosspoint()`
        //`利用两条边的中垂线得到圆心`
        //`测试：UVA12304`
    }
    Circle(Point a,Point b,Point c,bool t){
//        Line u,v;
//        double m = atan2(b.y-a.y,b.x-a.x), n = atan2(c.y-a.y,c.x-a.x);
//        u.s = a;
//        u.e = u.s + Point(cos((n+m)/2),sin((n+m)/2));
//        v.s = b;
//        m = atan2(a.y-b.y,a.x-b.x) , n = atan2(c.y-b.y,c.x-b.x);
//        v.e = v.s + Point(cos((n+m)/2),sin((n+m)/2));
//        p = u&v;
//        r = p.disToSegment(Line(a,b));
        //`三角形的内切圆`
        //`参数bool t没有作用，只是为了和上面外接圆函数区别`
        //`测试：UVA12304`
        if(((b-a)^(c-a))<0)
            swap(b,c);
        r=((a^b)+(b^c)+(c^a))/((b-a).len()+(c-b).len()+(a-c).len());
        Vector v1=((b-a).rotLeft()).trunc(r);
        Vector v2=((c-b).rotLeft()).trunc(r);
        Line l1={a+v1,b+v1};Line l2={b+v2,c+v2};
        p=l1.crossPoint(l2);
    }
    double area(){return PI*r*r;}
    double circumference(){return 2*PI*r;}
    int relation(Point b){
        //`点和圆的关系`
        double dis = b.disToPoint(p);
        if(sgn(dis-r) < 0)return 2;
        else if(sgn(dis-r)==0)return 1;
        return 0;
        //`0 圆外`//`1 圆上`//`2 圆内`
    }
    int relationSeg(Line v){
        //`线段和圆的关系`
        double dis = v.disPointToSeg(p);
        if(sgn(dis-r) < 0)return 2;
        else if(sgn(dis-r) == 0)return 1;
        return 0;
        //`比较的是圆心到线段的距离和半径的关系`
        //`0 圆外`//`1 圆上`//`2 圆内`
    }
    int relationLine(Line v){//checked
        //`直线和圆的关系`
        double dis = v.disPointToLine(p);
        if(sgn(dis-r) < 0)return 2;
        else if(sgn(dis-r) == 0)return 1;
        return 0;
        //`比较的是圆心到直线的距离和半径的关系`
        //`0 圆外`//`1 圆上`//`2 圆内`
    }
    int relationCircle(Circle v){//`两圆的关系`//checked
        double d = p.disToPoint(v.p);
        if(sgn(d-r-v.r) > 0)return 5;
        if(sgn(d-r-v.r) == 0)return 4;
        double l = fabs(r-v.r);
        if(sgn(d-r-v.r)<0 && sgn(d-l)>0)return 3;
        if(sgn(d-l)==0)return 2;
        if(sgn(d-l)<0)return 1;
        //`5 相离`//`4 外切`//`3 相交`//`2 内切`//`1 内含`
        //`需要Point的distance`
        //`测试：UVA12304`
    }
    int pointCrossCircle(Circle v,Point &p1,Point &p2){//checked
        //`求两个圆的交点，返回0表示没有交点，返回1是一个交点，2是两个交点`
        int rel = relationCircle(v);
        if(rel == 1 || rel == 5)return 0;
        double d = p.disToPoint(v.p);
        double l = (d*d+r*r-v.r*v.r)/(2*d);
        double h = sqrt(r*r-l*l);
        Point tmp = p + (v.p-p).trunc(l);
        p1 = tmp + ((v.p-p).rotLeft().trunc(h));
        p2 = tmp + ((v.p-p).rotRight().trunc(h));
        if(rel == 2 || rel == 4)
            return 1;
        return 2;
        //`需要relationcircle`
        //`测试：UVA12304`
    }
    int pointCrossLine(Line v,Point &p1,Point &p2){//checked
        //`求直线和圆的交点，返回交点个数`
        if(!(*this).relationLine(v))return 0;
        Point a = v.lineProg(p);
        double d = v.disPointToLine(p);
        d = sqrt(r*r-d*d);
        if(sgn(d) == 0){
            p1 = a;
            p2 = a;
            return 1;
        }
        p1 = a + (v.e-v.s).trunc(d);
        p2 = a - (v.e-v.s).trunc(d);
        return 2;
    }
    int getCircle(Point a,Point b,double r1,Circle &c1,Circle &c2){
        //`得到过a,b两点，半径为r1的两个圆`
        Circle x(a,r1),y(b,r1);
        int t = x.pointCrossCircle(y,c1.p,c2.p);
        if(!t)return 0;
        c1.r = c2.r = r;
        return t;
    }
    int getCircle(Line u,Point q,double r1,Circle &c1,Circle &c2){//checked
        //`得到与直线u相切，过点q,半径为r1的圆`
        double dis = u.disPointToLine(q);
        if(sgn(dis-r1*2)>0)return 0;
        if(sgn(dis) == 0){
            c1.p = q + ((u.e-u.s).rotLeft().trunc(r1));
            c2.p = q + ((u.e-u.s).rotRight().trunc(r1));
            c1.r = c2.r = r1;
            return 2;
        }
        Line u1 = Line((u.s + (u.e-u.s).rotLeft().trunc(r1)),(u.e + (u.e-u.s).rotLeft().trunc(r1)));
        Line u2 = Line((u.s + (u.e-u.s).rotRight().trunc(r1)),(u.e + (u.e-u.s).rotRight().trunc(r1)));
        Circle cc = Circle(q,r1);
        Point p1,p2;
        if(!cc.pointCrossLine(u1,p1,p2))cc.pointCrossLine(u2,p1,p2);
        c1 = Circle(p1,r1);
        if(p1 == p2){
            c2 = c1;
            return 1;
        }
        c2 = Circle(p2,r1);
        return 2;
        //`测试：UVA12304`
    }
    int getCircle(Line u,Line v,double r1,Circle &c1,Circle &c2,Circle &c3,Circle &c4){//checked
        //`同时与直线u,v相切，半径为r1的圆`
        if(u.parallel(v))return 0;//两直线平行
        Line u1 = Line(u.s + (u.e-u.s).rotLeft().trunc(r1),u.e + (u.e-u.s).rotLeft().trunc(r1));
        Line u2 = Line(u.s + (u.e-u.s).rotRight().trunc(r1),u.e + (u.e-u.s).rotRight().trunc(r1));
        Line v1 = Line(v.s + (v.e-v.s).rotLeft().trunc(r1),v.e + (v.e-v.s).rotLeft().trunc(r1));
        Line v2 = Line(v.s + (v.e-v.s).rotRight().trunc(r1),v.e + (v.e-v.s).rotRight().trunc(r1));
        c1.r = c2.r = c3.r = c4.r = r1;
        c1.p = u1.crossPoint(v1);
        c2.p = u1.crossPoint(v2);
        c3.p = u2.crossPoint(v1);
        c4.p = u2.crossPoint(v2);
        return 4;
        //`测试：UVA12304`
    }
    int getCircle(Circle cx,Circle cy,double r1,Circle &c1,Circle &c2){//checked
        //`同时与不相交圆cx,cy相切，半径为r1的圆`
        Circle x(cx.p,r1+cx.r),y(cy.p,r1+cy.r);
        int t = x.pointCrossCircle(y,c1.p,c2.p);
        if(!t)return 0;
        c1.r = c2.r = r1;
        return t;
        //`测试：UVA12304`
    }
    int tangentLine(Point q,Line &u,Line &v){
        //`过一点作圆的切线(先判断点和圆的关系)`
        int x = relation(q);
        if(x == 2)return 0;
        if(x == 1){
            u = Line(q,q + (q-p).rotLeft());
            v = u;
            return 1;
        }
        double d = p.disToPoint(q);
        double l = r*r/d;
        double h = sqrt(r*r-l*l);
        u = Line(q,p + ((q-p).trunc(l) + (q-p).rotLeft().trunc(h)));
        v = Line(q,p + ((q-p).trunc(l) + (q-p).rotRight().trunc(h)));
        return 2;
        //`测试：UVA12304`
    }
    double areaCircle(Circle v){
        //`求两圆相交的面积`
        int rel = relationCircle(v);
        if(rel >= 4)return 0.0;
        if(rel <= 2)return min(area(),v.area());
        double d = p.disToPoint(v.p);
        double hf = (r+v.r+d)/2.0;
        double ss = 2*sqrt(hf*(hf-r)*(hf-v.r)*(hf-d));
        double a1 = acos((r*r+d*d-v.r*v.r)/(2.0*r*d));
        a1 = a1*r*r;
        double a2 = acos((v.r*v.r+d*d-r*r)/(2.0*v.r*d));
        a2 = a2*v.r*v.r;
        return a1+a2-ss;
    }
    double areaTriangle(Point a,Point b) {
        //`求圆和三角形pab的相交面积`
        if (sgn((p - a) ^ (p - b)) == 0)return 0.0;
        Point q[5];
        int len = 0;
        q[len++] = a;
        Line l(a, b);
        Point p1, p2;
        if (pointCrossLine(l, q[1], q[2]) == 2) {
            if (sgn((a - q[1]) * (b - q[1])) < 0)q[len++] = q[1];
            if (sgn((a - q[2]) * (b - q[2])) < 0)q[len++] = q[2];
        }
        q[len++] = b;
        if (len == 4 && sgn((q[0] - q[1]) * (q[2] - q[1])) > 0)swap(q[1], q[2]);
        double res = 0;
        for (int i = 0; i < len - 1; i++) {
            if (relation(q[i]) == 0 || relation(q[i + 1]) == 0) {
                double arg = p.rad(q[i], q[i + 1]);
                res += r * r * arg / 2.0;
            } else {
                res += fabs((q[i] - p) ^ (q[i + 1] - p)) / 2.0;
            }
        }
        return res;
        //`测试：POJ3675 HDU3982 HDU2892`
    }
    double areaCircle(Point* poly,int n){
        //`多边形和圆交的面积`
        double ans = 0;
        for(int i = 1;i <= n;i++){
            int j = (i%n+1);
            if(sgn( (poly[j]-p)^(poly[i]-p) ) >= 0)
                ans += areaTriangle(poly[i],poly[j]);
            else ans -= areaTriangle(poly[i],poly[j]);
        }
        return fabs(ans);
        //`测试：POJ3675 HDU3982 HDU2892`
    }


    Point point(double d){ return Point(p.x + cos(d)*r, p.y + sin(d)*r);}//通过圆心角求坐标
    bool contain(Point p){return cmp(r,p.disToPoint(p))>=0;}

    void read(){scanf("%lf%lf%lf",&p.x,&p.y,&r);}
    Point p;
    double r;
};

struct Polygon {
    int n;
    Point p[MAXN];
    Line l[MAXN];
    bool isConvex(){
        //`判断是不是凸的`
        bool s[3];
        memset(s,false,sizeof(s));
        for(int i = 0;i < n;i++){
            int j = (i+1)%n;
            int k = (j+1)%n;
            s[sgn((p[j]-p[i])^(p[k]-p[i]))+1] = true;
            if(s[0] && s[2])return false;
        }
        return true;
    }
    int relationPoint(Point point){
        //判断点是否在多边形内，若点在多边形内返回1，在多边形外部返回0，在多边形上返回-1
        int wn = 0;
        for(int i = 1; i <= n; ++i){
            if(Line(p[i],p[i%+1]).pointOnSeg(point)) return -1;
            int k = sgn((p[i%n+1] - p[i])^(point - p[i]));
            int d1 = sgn(p[i].y - point.y);
            int d2 = sgn(p[i%n+1].y - point.y);
            if(k > 0 && d1 <= 0 && d2 > 0) wn++;
            if(k < 0 && d2 <= 0 && d1 > 0) wn--;
        }
        return (wn != 0);
    }
    Point getBaryCentre(){
        //`得到重心`
        Point ret(0,0);
        double area = 0;
        for(int i = 1;i < n-1;i++){
            double tmp = (p[i]-p[0])^(p[i+1]-p[0]);
            if(sgn(tmp) == 0)continue;
            area += tmp;
            ret.x += (p[0].x+p[i].x+p[i+1].x)/3*tmp;
            ret.y += (p[0].y+p[i].y+p[i+1].y)/3*tmp;
        }
        if(sgn(area)) ret = ret/area;
        return ret;
    }
    int relationcircle(Circle c){
        //`多边形和圆关系`
        int x = 2;
        if(relationPoint(c.p) != 1)return 0;//圆心不在内部
        for(int i = 0;i < n;i++){
            if(c.relationSeg(l[i])==2)return 0;
            if(c.relationSeg(l[i])==1)x = 1;
        }
        return x;
        //` 2 圆完全在多边形内`
        //` 1 圆在多边形里面，碰到了多边形边界`
        //` 0 其它`
    }
};
vector<Point> convexCut(const vector<Point> &ps,Point q1,Point q2){
    //`直线切凸多边形`
    //`多边形是逆时针的，在q1q2的左侧`
    //`测试:HDU3982`
    vector<Point>qs;
    int n = ps.size();
    for(int i = 0;i < n;i++){
        Point p1 = ps[i], p2 = ps[(i+1)%n];
        int d1 = sgn((q2-q1)^(p1-q1)), d2 = sgn((q2-q1)^(p2-q1));
        if(d1 >= 0)
            qs.push_back(p1);
        if(d1 * d2 < 0)
            qs.push_back(Line(p1,p2).crossPoint(Line(q1,q2)));
    }
    return qs;
}
char str[50];
Point p1,p2,p3,p4,p;
Circle c,c1,c2;
double r;
void solve(){

}
void init(){
    if(!strcmp(str,"CircumscribedCircle")){
        p1.read();p2.read();p3.read();
        c={p1,p2,p3};
        printf("(%lf,%lf,%lf)\n",c.p.x,c.p.y,c.r);
    }else if(!strcmp(str,"InscribedCircle")){
        p1.read();p2.read();p3.read();
        c={p1,p2,p3,true};
        printf("(%lf,%lf,%lf)\n",c.p.x,c.p.y,c.r);
    }else if(!strcmp(str,"TangentLineThroughPoint")){
        c.read();p.read();
        Line l1,l2;
        int num=c.tangentLine(p,l1,l2);
        if(num==2){
            double ang1=l1.getAngle()*180/PI,ang2=l2.getAngle()*180/PI;
            if(ang1<0) ang1+=180;
            if(ang1>=180) ang1-=180;
            if(ang2<0) ang2+=180;
            if(ang2>=180) ang2-=180;
            printf("[%lf,%lf]\n",min(ang1,ang2),max(ang1,ang2));
        }else if(num==1){
            double ang1=l1.getAngle()*180/PI;
            if(ang1<0) ang1+=180;
            if(ang1>=180) ang1-=180;
            printf("[%lf]\n",ang1);
        }else{
            printf("[]\n");
        }
    }else if(!strcmp(str,"CircleThroughAPointAndTangentToALineWithRadius")){
        p.read();p1.read();p2.read();
        scanf("%lf",&r);
        Line line(p1,p2);
        Circle c1,c2;
        int num=c.getCircle(line,p,r,c1,c2);
        if(num==0){
            printf("[]\n");
        }else if(num==1){
            printf("[(%f,%f)]\n",c1.p.x,c1.p.y);
        }else{
            if(c2.p<c1.p)swap(c1.p,c2.p);
            printf("[(%f,%f),(%f,%f)]\n",c1.p.x,c1.p.y,c2.p.x,c2.p.y);
        }
    }else if(!strcmp(str,"CircleTangentToTwoLinesWithRadius")){
        p1.read();p2.read();p3.read();p4.read();
        Line l1(p1,p2),l2(p3,p4);
        scanf("%lf",&r);
        Circle c1,c2,c3,c4;
        int num=c.getCircle(l1,l2,r,c1,c2,c3,c4);
        if(num){
            Point ans1=c1.p,ans2=c2.p,ans3=c3.p,ans4=c4.p;
            if(ans2<ans1)
                swap(ans1,ans2);
            if(ans3<ans2)
                swap(ans2,ans3);
            if(ans4<ans3)
                swap(ans3,ans4);
            if(ans2<ans1)
                swap(ans1,ans2);
            if(ans3<ans2)
                swap(ans2,ans3);
            if(ans2<ans1)
                swap(ans1,ans2);
            printf("[(%f,%f),(%f,%f),(%f,%f),(%f,%f)]\n",ans1.x,ans1.y,ans2.x,ans2.y,ans3.x,ans3.y,ans4.x,ans4.y);
        }else{
            printf("[]\n");
        }
    }else if(!strcmp(str,"CircleTangentToTwoDisjointCirclesWithRadius")){
        c1.read();c2.read();
        scanf("%lf",&r);
        Circle c3,c4;
        int num=c.getCircle(c1,c2,r,c3,c4);
        if(num==0){
            printf("[]\n");
        }else if(num==1){
            printf("[(%f,%f)]\n",c3.p.x,c3.p.y);
        }else{
            if(c4.p<c3.p)swap(c3.p,c4.p);
            printf("[(%f,%f),(%f,%f)]\n",c3.p.x,c3.p.y,c4.p.x,c4.p.y);
        }
    }
}
int main(){
//    scanf("%d",&T);
//    T=1;
//    int kase=1;
//    while(T--){
    while(~scanf("%s",str)){
        init();
        solve();
    }
    return 0;
}
