#include<map>
#include<set>
#include<cmath>
#include<queue>
#include<stack>
#include<ctime>
#include<vector>
#include<cstdio>
#include<vector>
#include<string>
#include<bitset>
#include<cstdlib>
#include<iomanip>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAXN=1e5+10;
const double EPS=1e-8;
const double PI=acos(-1);
inline int sgn(double a){ return a < -EPS ? -1 : a > EPS; }
inline int cmp(double a, double b){ return sgn(a-b); }
long long mod=1e9+7;
int n,m,T;
struct Point;
struct Point3;
struct Line;
struct Line3;
typedef Point Vector;
typedef Point3 Vector3;

struct Point{
    double x,y;
    Point(){}
    Point(double a, double b):x(a),y(b){}
    double len(){return sqrt(x*x+y*y);}
    double len2(){return x*x+y*y;}
    double disToPoint(Point p){return sqrt((x-p.x)*(x-p.x)+(y-p.y)*(y-p.y));}
    double disToLine(Line l);
    double disToSegment(Line l);
    bool onSegment(Line l);
    Point project(Line l);//投影
    Point rotleft(){
        //`逆时针旋转90度`
        return Point(-y,x);
    }
    Point rotright(){
        return Point(y,-x);
        //`顺时针旋转90度`
    }
    Point trunc(double r){
        //`化为长度为r的向量`
        double l = len();
        if(!sgn(l))return *this;
        r /= l;
        return Point(x*r,y*r);
    }
    double rad(Point a,Point b){//返回弧度角
        Point p = *this;
        return fabs(atan2( fabs((a-p)^(b-p)),(a-p)*(b-p) ));
        //acos(((a-p)*(b-p))/(a-p).len()/(b-p).len()));
        //`计算pa  和  pb 的夹角`
        //`就是求这个点看a,b 所成的夹角`
        //`测试 LightOJ1203`
    }
    double rad(Vector b){//返回弧度角
        return fabs(atan2( fabs((*this)^(b)),(*this)*(b) ));
        //`计算*this和  b 的夹角`
    }
    Point rotate(Point p,double angle){
        Point v = (*this) - p;
        double c = cos(angle), s = sin(angle);
        return Point(p.x + v.x*c - v.y*s,p.y + v.x*s + v.y*c);
        //`绕着p点逆时针旋转angle`
    }
    Vector rotate(double angle){
        double c = cos(angle), s = sin(angle);
        return Vector(x*c-y*s, x*s+y*c);
        //~向量逆时针旋转angle`
    }
    void read(){scanf("%lf%lf",&x,&y);}
    Point operator+(const Vector v)const{return {x+v.x,y+v.y};}
    Vector operator-(const Point p)const{return {x-p.x,y-p.y};}
    double operator^(const Vector v)const{return x*v.y-y*v.x;}//叉乘
    double operator*(const Vector v)const{return x*v.x+y*v.y;}//点乘
    Vector operator*(const double d)const{return {x*d,y*d};}
    Vector operator/(const double d)const{return {x/d,y/d};}
    bool operator==(const Point p)const{return cmp(x,p.x)==0&&cmp(y,p.y)==0;}
    bool operator<(const Point p)const{if(cmp(x,p.x)==0) return y<p.y;return x<p.x;}
};
struct Line{
    Line(){}
    Line(Point a,Point b){s=a;e=b;ang=atan2(e.y-s.y,e.x-s.x);}
    Point point(double t){return s + (e - s)*t;}//返回点P = v + (p - v)*t
    bool inter(Line l){
        return
                max(s.x,e.x)>=min(l.s.x,l.e.x)&&
                max(l.s.x,l.e.x)>=min(s.x,e.x)&&
                max(s.y,e.y)>=min(l.s.y,l.e.y)&&
                max(l.s.y,l.e.y)>=min(s.y,e.y)&&
                sgn((l.s-s)^(e-s))*sgn((e-s)^(l.e-s))>=0&&
                sgn((s-l.s)^(l.e-l.s))*sgn((l.e-l.s)^(e-l.s))>=0;
    }//线段与线段
    bool segLineInt(Line l){return sgn((e-s)^(l.e-s))*sgn((e-s)^(l.s-s))<=0;}//直线(主)与线段
    Point operator &(Line &b){
        double t=((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));
        return s+(e-s)*t;
    }
    Point s,e;
    double ang;
};
struct Circle{
    Circle(){}
    Circle(Point pp, double rr):p(pp), r(rr) {}
    Point point(double d){ return Point(p.x + cos(d)*r, p.y + sin(d)*r);}//通过圆心角求坐标
    bool contain(Point p){return cmp(r,p.disToPoint(p))>=0;}
    Circle(Point a,Point b,Point c){
        Line u = Line((a+b)/2,((a+b)/2)+((b-a).rotleft()));
        Line v = Line((b+c)/2,((b+c)/2)+((c-b).rotleft()));
        p = u&v;
        r = p.disToPoint(a);
        //`三角形的外接圆`
        //`需要Point的+ /  rotate()  以及Line的crosspoint()`
        //`利用两条边的中垂线得到圆心`
        //`测试：UVA12304`
    }
    Circle(Point a,Point b,Point c,bool t){
//        Line u,v;
//        double m = atan2(b.y-a.y,b.x-a.x), n = atan2(c.y-a.y,c.x-a.x);
//        u.s = a;
//        u.e = u.s + Point(cos((n+m)/2),sin((n+m)/2));
//        v.s = b;
//        m = atan2(a.y-b.y,a.x-b.x) , n = atan2(c.y-b.y,c.x-b.x);
//        v.e = v.s + Point(cos((n+m)/2),sin((n+m)/2));
//        p = u&v;
//        r = p.disToSegment(Line(a,b));
        //`三角形的内切圆`
        //`参数bool t没有作用，只是为了和上面外接圆函数区别`
        //`测试：UVA12304`
        if(((b-a)^(c-a))<0)
            swap(b,c);
        r=((a^b)+(b^c)+(c^a))/((b-a).len()+(c-b).len()+(a-c).len());
        Vector v1=((b-a).rotleft()).trunc(r);
        Vector v2=((c-b).rotleft()).trunc(r);
        Line l1={a+v1,b+v1};Line l2={b+v2,c+v2};
        p=l1&l2;
    }
    int relation(Point b){
        double dst = b.disToPoint(p);
        if(sgn(dst-r) < 0)return 2;
        else if(sgn(dst-r)==0)return 1;
        return 0;
        //`点和圆的关系`
        //`0 圆外`
        //`1 圆上`
        //`2 圆内`
    }
    int relationseg(Line v){
        double dst = p.disToSegment(v);
        if(sgn(dst-r) < 0)return 2;
        else if(sgn(dst-r) == 0)return 1;
        return 0;
        //`线段和圆的关系`
        //`比较的是圆心到线段的距离和半径的关系`
    }
    int relationline(Line v){
        double dst = p.disToLine(v);
        if(sgn(dst-r) < 0)return 2;
        else if(sgn(dst-r) == 0)return 1;
        return 0;
        //`直线和圆的关系`
        //`比较的是圆心到直线的距离和半径的关系`
    }
    int relationcircle(Circle v){//`两圆的关系`
        double d = p.disToPoint(v.p);
        if(sgn(d-r-v.r) > 0)return 5;
        if(sgn(d-r-v.r) == 0)return 4;
        double l = fabs(r-v.r);
        if(sgn(d-r-v.r)<0 && sgn(d-l)>0)return 3;
        if(sgn(d-l)==0)return 2;
        if(sgn(d-l)<0)return 1;
        //`5 相离`//`4 外切`//`3 相交`//`2 内切`//`1 内含`
        //`需要Point的distance`
        //`测试：UVA12304`
    }
    int pointcrosscircle(Circle v,Point &p1,Point &p2){//`求两个圆的交点，返回0表示没有交点，返回1是一个交点，2是两个交点`
        int rel = relationcircle(v);
        if(rel == 1 || rel == 5)return 0;
        double d = p.disToPoint(v.p);
        double l = (d*d+r*r-v.r*v.r)/(2*d);
        double h = sqrt(r*r-l*l);
        Point tmp = p + (v.p-p).trunc(l);
        p1 = tmp + ((v.p-p).rotleft().trunc(h));
        p2 = tmp + ((v.p-p).rotright().trunc(h));
        if(rel == 2 || rel == 4)
            return 1;
        return 2;
        //`需要relationcircle`
        //`测试：UVA12304`
    }
    double areatriangle(Point a,Point b){
        if(sgn((p-a)^(p-b)) == 0)return 0.0;
        Point q[5];
        int len = 0;
        q[len++] = a;
        Line l(a,b);
        Point p1,p2;
        if(pointcrossline(l,q[1],q[2])==2){
            if(sgn((a-q[1])*(b-q[1]))<0)q[len++] = q[1];
            if(sgn((a-q[2])*(b-q[2]))<0)q[len++] = q[2];
        }
        q[len++] = b;
        if(len == 4 && sgn((q[0]-q[1])*(q[2]-q[1]))>0)swap(q[1],q[2]);
        double res = 0;
        for(int i = 0;i < len-1;i++){
            if(relation(q[i])==0||relation(q[i+1])==0){
                double arg = p.rad(q[i],q[i+1]);
                res += r*r*arg/2.0;
            }
            else{
                res += fabs((q[i]-p)^(q[i+1]-p))/2.0;
            }
        }
        return res;
        //`求圆和三角形pab的相交面积`
        //`测试：POJ3675 HDU3982 HDU2892`
    }
    int pointcrossline(Line v,Point &p1,Point &p2){//`求直线和圆的交点，返回交点个数`
        if(!(*this).relationline(v))return 0;
        Point a = p.project(v);
        double d = p.disToLine(v);
        d = sqrt(r*r-d*d);
        if(sgn(d) == 0){
            p1 = a;
            p2 = a;
            return 1;
        }
        p1 = a + (v.e-v.s).trunc(d);
        p2 = a - (v.e-v.s).trunc(d);
        return 2;
    }
    int getcircle(Line u,Point q,double r1,Circle &c1,Circle &c2){
        //`得到与直线u相切，过点q,半径为r1的圆`
        double dis = q.disToLine(u);
        if(sgn(dis-r1*2)>0)return 0;
        if(sgn(dis) == 0){
            c1.p = q + ((u.e-u.s).rotleft().trunc(r1));
            c2.p = q + ((u.e-u.s).rotright().trunc(r1));
            c1.r = c2.r = r1;
            return 2;
        }
        Line u1 = Line((u.s + (u.e-u.s).rotleft().trunc(r1)),(u.e + (u.e-u.s).rotleft().trunc(r1)));
        Line u2 = Line((u.s + (u.e-u.s).rotright().trunc(r1)),(u.e + (u.e-u.s).rotright().trunc(r1)));
        Circle cc = Circle(q,r1);
        Point p1,p2;
        if(!cc.pointcrossline(u1,p1,p2))cc.pointcrossline(u2,p1,p2);
        c1 = Circle(p1,r1);
        if(p1 == p2){
            c2 = c1;
            return 1;
        }
        c2 = Circle(p2,r1);
        return 2;
        //`测试：UVA12304`
    }
    int getcircle(Line u,Line v,double r1,Circle &c1,Circle &c2,Circle &c3,Circle &c4){
        //`同时与直线u,v相切，半径为r1的圆`
        if(u.parallel(v))return 0;//两直线平行
        Line u1 = Line(u.s + (u.e-u.s).rotleft().trunc(r1),u.e + (u.e-u.s).rotleft().trunc(r1));
        Line u2 = Line(u.s + (u.e-u.s).rotright().trunc(r1),u.e + (u.e-u.s).rotright().trunc(r1));
        Line v1 = Line(v.s + (v.e-v.s).rotleft().trunc(r1),v.e + (v.e-v.s).rotleft().trunc(r1));
        Line v2 = Line(v.s + (v.e-v.s).rotright().trunc(r1),v.e + (v.e-v.s).rotright().trunc(r1));
        c1.r = c2.r = c3.r = c4.r = r1;
        c1.p = u1.crosspoint(v1);
        c2.p = u1.crosspoint(v2);
        c3.p = u2.crosspoint(v1);
        c4.p = u2.crosspoint(v2);
        return 4;
        //`测试：UVA12304`
    }
    int getcircle(Circle cx,Circle cy,double r1,Circle &c1,Circle &c2){
        //`同时与不相交圆cx,cy相切，半径为r1的圆`
        Circle x(cx.p,r1+cx.r),y(cy.p,r1+cy.r);
        int t = x.pointcrosscircle(y,c1.p,c2.p);
        if(!t)return 0;
        c1.r = c2.r = r1;
        return t;
        //`测试：UVA12304`
    }
    double areacircle(Point* pp,int n){
        double ans = 0;
        for(int i = 1;i <= n;i++){
            int j = (i%n+1);
            if(sgn( (pp[j]-p)^(pp[i]-p) ) >= 0)
                ans += areatriangle(pp[i],pp[j]);
            else ans -= areatriangle(pp[i],pp[j]);
        }
        return fabs(ans);
        //`多边形和圆交的面积`
        //`测试：POJ3675 HDU3982 HDU2892`
    }
    void read(){scanf("%lf%lf%lf",&p.x,&p.y,&r);}
    Point p;
    double r;
};
double Point::disToLine(Line l){
    Vector v1=l.e-l.s,v2=*this-l.s;
    return fabs((v1^v2))/(v1.len());
}
double Point::disToSegment(Line l){
    if(l.s==l.e) return (*this-l.s).len();
    Vector v1 = l.e-l.s, v2 = *this-l.s, v3 = *this-l.e;
    if(sgn(v1*v2) < 0) return v2.len();
    if(sgn(v1*v3) > 0) return v3.len();
    return disToLine(l);
}
bool Point::onSegment(Line l){
    Vector v1=l.s-*this;
    Vector v2=l.e-*this;
    return sgn(v1^v2)==0&&sgn(v1*v2)<=0;
}
Point Point::project(Line l) {//投影 对于给定的三个点p1、p2、p，从点p向通过
//p1、p2的直线引一条垂线，求垂足x的坐标。（点p在直线p1p2上的投影）
    Vector base = l.e - l.s;
    double r = (*this-l.s)*(base)/base.norm();
    return l.s+base*r;
}
