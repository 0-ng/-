//先用SPFA求出虚点0到n个点的距离，若有负环则退出，否则更新每条边的权值使其为正，然后对n个点进行dijkstra求dis

long long Map[3005][3005];
long long dis[MAXN];
long long h[MAXN];
int change[MAXN];
bool SPFA(int s){
    for(int i=0;i<=n;i++){
        h[i]=1e9;
        change[i]=0;
    }
    queue<int>q;
    q.push(s);
    h[s]=0;
    while(!q.empty()){
        int now=q.front();q.pop();
        for(int i=1;i<=n;i++){
            if(Map[now][i]==1e9)continue;
            if(h[i]>h[now]+Map[now][i]){
                h[i]=h[now]+Map[now][i];
                q.push(i);
                change[i]++;
                if(change[i]>n)return true;
            }
        }
    }
    return false;
}
struct Edge{
    int to;
    long long dis;
    bool operator<(Edge e)const{
        return dis>e.dis;
    }
};
vector<Edge>vec[MAXN];
bool vis[MAXN];
void dij(int s){
    for(int i=1;i<=n;i++){
        dis[i]=1e9;
        vis[i]=false;
    }
    priority_queue<Edge>pq;
    pq.push({s,0});
    dis[s]=0;
    while(!pq.empty()){
        Edge now=pq.top();pq.pop();
        int u=now.to;
        if(vis[u])continue;
        vis[u]=true;
        for(auto edge:vec[u]){
            if(vis[edge.to])continue;
            if(dis[edge.to]>dis[u]+edge.dis){
                dis[edge.to]=dis[u]+edge.dis;
                pq.push({edge.to,dis[edge.to]});
            }
        }
    }
}
void solve(){
    if(SPFA(0)){
        printf("-1\n");
        return;
    }
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(i==j)continue;
            if(Map[i][j]!=1e9)
                vec[i].push_back({j,Map[i][j]+h[i]-h[j]});
        }
    }
    for(int i=1;i<=n;i++){
        dij(i);
        long long sum=0;
        for(int j=1;j<=n;j++){
            if(dis[j]==1e9)sum+=j*dis[j];
            else sum+=j*(dis[j]+h[j]-h[i]);
        }
        printf("%lld\n",sum);
    }
}
void init(){
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            Map[i][j]=1e9;
    for(int i=1;i<=n;i++)
        Map[i][i]=0;
    for(int i=1,u,v,w;i<=m;i++){
        scanf("%d%d%d",&u,&v,&w);
        Map[u][v]=min(Map[u][v],1LL*w);
    }
}
