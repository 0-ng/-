#include<map>
#include<set>
#include<cmath>
#include<queue>
#include<stack>
#include<ctime>
#include<vector>
#include<cstdio>
#include<vector>
#include<string>
#include<bitset>
#include<cstdlib>
#include<iomanip>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAXN=1e5+10;
const double EPS=1e-6;
const double PI=acos(-1);
inline int sgn(double a){ return a < -EPS ? -1 : a > EPS; }
inline int cmp(double a, double b){ return sgn(a-b); }
long long mod=1e9+7;
int INF=0x3f3f3f3f;
int n,m,T,x;
char a[MAXN],b[MAXN];
struct node{
    int e;
    int v;
    int nxt;
}edge[MAXN];
int cnt;
int head[MAXN],dis[MAXN];
int cur[MAXN];
void add(int from,int to,int val) {
    edge[cnt].e = to;
    edge[cnt].v = val;
    edge[cnt].nxt = head[from];
    head[from] = cnt;
    cnt++;
}
bool bfs(){
    memset(dis,-1, sizeof(dis));
    dis[1]=0;
    queue<int>q;
    q.push(1);
    while(!q.empty()){
        int r=q.front();q.pop();
        for(int i=head[r];i!=-1;i=edge[i].nxt){
            int j=edge[i].e;
            if(dis[j]==-1&&edge[i].v){
                dis[j]=dis[r]+1;
                q.push(j);
            }
        }
    }
    return dis[n]!=-1;
}
int dfs(int u,int flo){
    if(u==n) return flo;
    int delta=flo;
    for(int i=cur[u];i!=-1;i=edge[i].nxt){
        cur[u]=edge[i].nxt;
        int v=edge[i].e;
        if(dis[v]==(dis[u]+1)&&edge[i].v>0){
            int d=dfs(v,min(delta,edge[i].v));
            edge[i].v-=d;
            edge[i+1].v+=d;
            delta-=d;
            if(delta==0)break;
        }
    }
    return flo-delta;
}
int dini() {//求最大流量
    int ans=0;
    while(bfs()){
        for(int i=1;i<=n;i++)
            cur[i]=head[i];
        ans+=dfs(1,INF);
    }
    return ans;
}
void solve(){
    int a=dini();
    if(a){
        printf("%d %d\n",a,(1LL*x+a-1)/a);
    }else{
        printf("Orz Ni Jinan Saint Cow!");
    }
}
void init(){
    scanf("%d%d%d",&n,&m,&x);
    memset(head,-1, sizeof(head));
    for(int i=1,u,v,w;i<=m;i++){
        scanf("%d%d%d",&u,&v,&w);
        add(u,v,w);
        add(v,u,0);
    }
}
int main(){
//    scanf("%d",&T);
    T=1;
    while(T--){
        init();
        solve();
    }
    return 0;
}
