struct Edge{
    int nx;
    int to;
    int w;
}edge[MAXN];
int cnt=1;
int s,t;
int head[MAXN],cur[MAXN];
void add(int u,int v,int w){
    cnt++;
    edge[cnt].to=v;
    edge[cnt].w=w;
    edge[cnt].nx=head[u];
    head[u]=cnt;
}
int dis[MAXN];
int dfs(int now,int flow){
    if(now==t)return flow;
    int f=0;
    for(int &i=cur[now];i;i=edge[i].nx){
        int to=edge[i].to;
        if(dis[to]!=dis[now]+1||edge[i].w==0)continue;
        int tmp=dfs(to,min(edge[i].w,flow));
        flow-=tmp;
        edge[i].w-=tmp;edge[i^1].w+=tmp;
        f+=tmp;
        if(flow<=0)break;
    }
    return f;
}
bool bfs(){
    memcpy(cur,head,sizeof(head));
    memarray(dis,0);
    dis[s]=1;
    queue<int>q;
    q.push(s);
    while(!q.empty()){
        int now=q.front();q.pop();
        for(int i=head[now];i;i=edge[i].nx){
            int to=edge[i].to;
            if(dis[to]||edge[i].w==0)continue;
            dis[to]=dis[now]+1;
            q.push(to);
        }
    }
    return dis[t];
}
int dinic(){
    int ans=0;
    while(bfs()){
        ans+=dfs(s,INF);
    }
    return ans;
}
void solve(){
    int ans=dinic();
    printf("%d\n",ans);
}
void init(){
    scanf("%d%d%d%d",&n,&m,&s,&t);
    for(int i=1;i<=n;i++){
        add(i,i+n,1);add(i+n,i,0);
    }
    s+=n;
    for(int i=1,u,v;i<=m;i++){
        scanf("%d%d",&u,&v);
        add(u+n,v,INF);add(v,u+n,0);
        add(v+n,u,INF);add(u,v+n,0);
    }
}
