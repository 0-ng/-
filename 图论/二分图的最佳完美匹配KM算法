bool visx[105],visy[105];
int linker[105];
int slack[105];
int ly[105],lx[105];
int g[105][105];
int nx,ny;
bool dfs(int x){
    visx[x]=true;
    for(int y=1;y<=ny;y++){
        if(visy[y])continue;
        int tmp=lx[x]+ly[y]-g[x][y];
        if(tmp==0){
            visy[y]=true;
            if(linker[y]==-1||dfs(linker[y])){
                linker[y]=x;
                return true;
            }
        }else if(slack[y]>tmp){
            slack[y]=tmp;
        }
    }
    return false;
}
int KM(){
    memarray(linker,-1);
    memarray(ly,0);
    for(int i=1;i<=nx;i++){
        lx[i]=-INF;
        for(int j=1;j<=ny;j++)
            lx[i]=max(lx[i],g[i][j]);
    }
    for(int x=1;x<=nx;x++){
        for(int i=1;i<=ny;i++)
            slack[i]=INF;
        while(true){
            memarray(visx,false);
            memarray(visy,false);
            if(dfs(x))break;
            int d=INF;
            for(int i=1;i<=ny;i++)
                if(!visy[i]&&d>slack[i])
                    d=slack[i];
            for(int i=1;i<=nx;i++)
                if(visx[i])
                    lx[i]-=d;
            for(int i=1;i<=ny;i++){
                if(visy[i])ly[i]+=d;
                else slack[i]-=d;
            }
        }
    }
    int ret=0;
    for(int i=1;i<=ny;i++)
        if(linker[i]!=-1)
            ret+=g[linker[i]][i];
    return ret;
}
void solve(){
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            g[i][j]=-g[i][j];
    printf("%d\n",-KM());
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            g[i][j]=-g[i][j];
    printf("%d\n",KM());
}
void init(){
    scanf("%d",&n);
    nx=ny=n;
    for(int i=1;i<=n;i++)
        for(int j=1;j<=n;j++)
            scanf("%d",g[i]+j);
}
--------------------------------------g为i-j的边权
long long a[MAXN],b[MAXN],c[MAXN],p[MAXN];
long long g[MAXN][MAXN];
long long cc[MAXN],mb[MAXN],ka[MAXN],kb[MAXN];
long long vb[MAXN];
void Bfs(int u){
    long long a,v=0,vl=0,d;
    memarray(p,0);
    memarray(cc,INF);
    mb[v]=u;
    do {
        a=mb[v],d=INF,vb[v]=1;
        for(int b=1;b<=n;b++)if(!vb[b]){
            if(cc[b]>ka[a]+kb[b]-g[a][b])
                cc[b]=ka[a]+kb[b]-g[a][b],p[b]=v;
            if(cc[b]<d) d=cc[b],vl=b;
        }
        for(int b=0;b<=n;b++)
            if(vb[b]) ka[mb[b]]-=d,kb[b]+=d;
            else cc[b]-=d;
        v=vl;
    } while(mb[v]);
    while(v) mb[v]=mb[p[v]],v=p[v];
}
long long KM(){
    memarray(mb,0);
    memarray(ka,0);
    memarray(kb,0);
    for(int a=1;a<=n;a++){
        memarray(vb,0);
		Bfs(a);
	}
	long long res=0;
	for(int b=1;b<=n;b++)
        res+=g[mb[b]][b];
	return res;
}
