vector<int>vec[MAXN];
int dfn[MAXN],low[MAXN];
int cuo;
stack<int>s;
bool vis[MAXN];
int ans;
int num[MAXN];
void dfs(int now){
    dfn[now]=low[now]=++cuo;
    s.push(now);
    vis[now]=true;
    for(auto i:vec[now]){
        if(!dfn[i]){
            dfs(i);
            low[now]=min(low[now],low[i]);
        }else if(vis[i]){
            low[now]=min(low[now],dfn[i]);
        }
    }
    if(dfn[now]==low[now]){
        ans++;
        while(s.top()!=now){
            int t=s.top();s.pop();
            num[ans]++;
            vis[t]=false;
        }
        num[ans]++;
        vis[now]=false;
        s.pop();
    }
}
void solve(){
    for(int i=1;i<=n;i++){
        if(dfn[i])continue;
        dfs(i);
    }
    int a=0;
    for(int i=1;i<=ans;i++){
        if(num[i]>1)
            a++;
    }
    printf("%d\n",a);
}
void init(){
    scanf("%d%d",&n,&m);
    for(int i=1,u,v;i<=m;i++){
        scanf("%d%d",&u,&v);
        vec[u].push_back(v);
    }
}
