//已知一棵包含 NN 个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作：
//操作 1： 格式： 1 x y z 表示将树从 x 到 y 结点最短路径上所有节点的值都加上 z。
//操作 2： 格式： 2 x y 表示求树从 x 到 y 结点最短路径上所有节点的值之和。
//操作 3： 格式： 3 x z 表示将以 x 为根节点的子树内所有节点值都加上 z。
//操作 4： 格式： 4 x 表示求以 x 为根节点的子树内所有节点值之和
int n,m;
long long val[MAXN];
int r;
long long p;
vector<int>vec[MAXN];
int fa[MAXN],depth[MAXN];
int siz[MAXN],bigson[MAXN];
void dfs1(int now,int pre){
    int mxson=-1;
    siz[now]=1;
    for(auto to:vec[now]){
        if(to==pre)continue;
        fa[to]=now;
        depth[to]=depth[now]+1;
        dfs1(to,now);
        siz[now]+=siz[to];
        if(mxson<siz[to]){
            bigson[now]=to;
            mxson=siz[to];
        }
    }
}
int top[MAXN],dfn[MAXN],pos[MAXN],cnt[MAXN];
int cuo;
void dfs2(int now,int tp){
    top[now]=tp;
    dfn[now]=++cuo;
    pos[cuo]=now;
    if(bigson[now])
        dfs2(bigson[now],tp);
    for(auto to:vec[now]){
        if(to!=fa[now]&&to!=bigson[now])
            dfs2(to,to);
    }
    cnt[now]=cuo;
}
struct Node{
    long long c;
    long long f;
}t[MAXN<<2];
void push_up(int rt){
    t[rt].c=(t[rt<<1].c+t[rt<<1|1].c)%p;
}
void build(int l,int r,int rt){
    if(l==r){
        t[rt].c=val[pos[l]];
        return;
    }
    int mid=(l+r)>>1;
    build(l,mid,rt<<1);
    build(mid+1,r,rt<<1|1);
    push_up(rt);
}
void down(int l,int r,int rt){
    t[rt<<1].f+=t[rt].f;
    t[rt<<1|1].f+=t[rt].f;
    int mid=(l+r)>>1;
    t[rt<<1].c+=t[rt].f*(mid-l+1)%p;
    t[rt<<1|1].c+=t[rt].f*(r-mid)%p;
    t[rt].f=0;
}
void change(int l,int r,int rt,int ls,int rs,long long z){
    if(ls<=l&&r<=rs){
        t[rt].c+=(r-l+1)*z;
        t[rt].f+=z;
        return;
    }
    if(t[rt].f)down(l,r,rt);
    int mid=(l+r)>>1;
    if(ls<=mid)change(l,mid,rt<<1,ls,rs,z);
    if(rs>mid)change(mid+1,r,rt<<1|1,ls,rs,z);
    push_up(rt);
}
long long getsum(int l,int r,int rt,int ls,int rs){
    if(ls<=l&&r<=rs){
        return t[rt].c;
    }
    if(t[rt].f)down(l,r,rt);
    int mid=(l+r)>>1;
    long long ans=0;
    if(ls<=mid)ans+=getsum(l,mid,rt<<1,ls,rs);
    if(rs>mid)ans+=getsum(mid+1,r,rt<<1|1,ls,rs);
    return ans%p;
}
void change_xtoy(int x,int y,long long z){
    while(top[x]!=top[y]){
        if(depth[top[x]]>depth[top[y]])swap(x,y);
        change(1,cuo,1,dfn[top[y]],dfn[y],z);
        y=fa[top[y]];
    }
    if(depth[x]>depth[y])swap(x,y);
    change(1,cuo,1,dfn[x],dfn[y],z);
}
void getson_xtoy(int x,int y){
    long long ans=0;
    while(top[x]!=top[y]){
        if(depth[top[x]]>depth[top[y]])swap(x,y);
        ans=(ans+getsum(1,cuo,1,dfn[top[y]],dfn[y]))%p;
        y=fa[top[y]];
    }
    if(depth[x]>depth[y])swap(x,y);
    ans=(ans+getsum(1,cuo,1,dfn[x],dfn[y]))%p;
    printf("%lld\n",ans);
}
void change_sontree(int x,long long z){
    change(1,cuo,1,dfn[x],cnt[x],z);
}
void getsum_sontree(int x){
    printf("%lld\n",getsum(1,cuo,1,dfn[x],cnt[x])%p);
}
void solve(){
    dfs1(r,0);
    dfs2(r,r);
    build(1,cuo,1);
    int op,x,y,z;
    while(m--){
        scanf("%d",&op);
        if(op==1){
            scanf("%d%d%d",&x,&y,&z);
            change_xtoy(x,y,z);
        }else if(op==2){
            scanf("%d%d",&x,&y);
            getson_xtoy(x,y);
        }else if(op==3){
            scanf("%d%d",&x,&z);
            change_sontree(x,z);
        }else{
            scanf("%d",&x);
            getsum_sontree(x);
        }
    }
}
void init(){
    scanf("%d%d%d%lld",&n,&m,&r,&p);
    for(int i=1;i<=n;i++)
        scanf("%lld",val+i);
    for(int i=1,u,v;i<n;i++){
        scanf("%d%d",&u,&v);
        vec[u].pb(v);
        vec[v].pb(u);
    }
}
