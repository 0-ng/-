vector<int>vec[MAXN];
int depth[MAXN];
int fa[MAXN][22];
struct LCA{
    void init(){
        depth[1]=1;
        dfs(1,0);
        for(int i=1;i<=20;i++)
            for(int j=1;j<=n;j++)
                fa[j][i]=fa[fa[j][i-1]][i-1];
    }
    void dfs(int now,int pre){
        for(auto to:vec[now]){
            if(to==pre)continue;
            depth[to]=depth[now]+1;
            fa[to][0]=now;
            dfs(to,now);
        }
    }
    int lca(int x,int y){
        if(depth[x]>depth[y])swap(x,y);
        for(int i=20;i>=0;i--)
            if(depth[fa[y][i]]>=depth[x])
                y=fa[y][i];
        if(x==y)return depth[x];
        for(int i=20;i>=0;i--)
            if(fa[x][i]!=fa[y][i]){
                x=fa[x][i];
                y=fa[y][i];
            }
        return depth[fa[x][0]];
    }
}lca;
