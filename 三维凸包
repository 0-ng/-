J - 3D Convex Hull HDU - 3662 



struct CH3D {
    struct face {
        int a, b, c;//表示凸包一个面上的三个点的编号
        bool ok;//表示该面是否属于最终凸包上的面
    };
    int n;//初始顶点数
    Point3 P[MAXN];//初始顶点
    int num;//凸包表面的三角形数
    face F[8 * MAXN];//凸包表面的三角形
    int g[MAXN][MAXN];//凸包表面的三角形
    Point3 cross(const Point3 &a, const Point3 &b, const Point3 &c) {
        return {(b.y - a.y) * (c.z - a.z) - (b.z - a.z) * (c.y - a.y),
                (b.z - a.z) * (c.x - a.x) - (b.x - a.x) * (c.z - a.z),
                (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x)};
    } //叉乘
     double dblcmp(Point3 &p, face &f) {
        Point3 m = P[f.b] - P[f.a];
        Point3 n = P[f.c] - P[f.a];
        Point3 t = p - P[f.a];
        return (m ^ n) * t;
    }//正：点在面同向

    void deal(int p, int a, int b) {
        int f = g[a][b];//搜索与该边相邻的另一个平面
        face add;
        if (F[f].ok) {
            if (dblcmp(P[p], F[f]) > EPS)
                dfs(p, f);
            else {
                add.a = b;
                add.b = a;
                add.c = p;//这里注意顺序，要成右手系
                add.ok = true;
                num++;
                g[p][b] = g[a][p] = g[b][a] = num;
                F[num] = add;
            }
        }
    }

    void dfs(int p, int now) {
        F[now].ok = 0;
        deal(p, F[now].b, F[now].a);
        deal(p, F[now].c, F[now].b);
        deal(p, F[now].a, F[now].c);
    }//递归搜索所有应该从凸包内删除的面
    bool same(int s, int t) {
        Point3 &a = P[F[s].a];
        Point3 &b = P[F[s].b];
        Point3 &c = P[F[s].c];
        return fabs(volume(a, b, c, P[F[t].a])) < EPS &&
               fabs(volume(a, b, c, P[F[t].b])) < EPS &&
               fabs(volume(a, b, c, P[F[t].c])) < EPS;
    }

    void create() {
        num = 0;
        if (n < 4)return;
        bool flag = true;
        for (int i = 2; i <= n; i++) {
            if ((P[1] - P[i]).len() > EPS) {
                swap(P[2], P[i]);
                flag = false;
                break;
            }
        }
        if (flag)return;
        flag = true;
        for (int i = 3; i <= n; i++) {
            if (((P[1] - P[2]) ^ (P[2] - P[i])).len() > EPS) {
                swap(P[3], P[i]);
                flag = false;
                break;
            }
        }
        if (flag)return;
        flag = true;
        for (int i = 4; i <= n; i++) {
            if (fabs(((P[1] - P[2]) ^ (P[2] - P[3])) * (P[1] - P[i])) > EPS) {
                swap(P[4], P[i]);
                flag = false;
                break;
            }
        }
        if (flag)return;

        for (int i = 1; i <= 4; i++) {
            face add;
            add.a = (i) % 4 + 1;
            add.b = (i + 1) % 4 + 1;
            add.c = (i + 2) % 4 + 1;
            add.ok = true;
            if (dblcmp(P[i], add) > 0)swap(add.b, add.c);
            num++;
            g[add.a][add.b] = g[add.b][add.c] = g[add.c][add.a] = num;
            F[num] = add;
        }
        for (int i = 5; i <= n; i++) {
            for (int j = 1; j <= num; j++) {
                if (F[j].ok && dblcmp(P[i], F[j]) > EPS) {
                    dfs(i, j);
                    break;
                }
            }
        }
        int tmp = num;
        num = 0;
        for (int i = 1; i <= tmp; i++)
            if (F[i].ok)
                F[++num] = F[i];
    }

    double CH_area() {//表面积
        double res = 0;
        if (n == 3) {
            Point3 p = cross(P[1], P[2], P[3]);
            res = p.len() / 2.0;
            return res;
        }
        for (int i = 1; i <= num; i++)
            res += area(P[F[i].a], P[F[i].b], P[F[i].c]);
        return res / 2.0;
    }

    double CH_volume() {
        double res = 0;
        Point3 tmp(0, 0, 0);
        for (int i = 1; i <= num; i++)
            res += volume(tmp, P[F[i].a], P[F[i].b], P[F[i].c]);
        return fabs(res / 6.0);
    }

    int triangle() {
        return num;
    }//表面三角形个数
    int polygon() {
        int res = 0;
        for (int i = 1, flag; i <= num; i++) {
            flag = 1;
            for (int j = 1; j < i; j++)
                if (same(i, j)) {
                    flag = 0;
                    break;
                }
            res += flag;
        }
        return res;
    }

    Point3 barycenter() {
        Point3 ans(0, 0, 0), o(0, 0, 0);
        double all = 0;
        for (int i = 1; i <= num; i++) {
            double vol = volume(o, P[F[i].a], P[F[i].b], P[F[i].c]);
            ans = ans + (o + P[F[i].a] + P[F[i].b] + P[F[i].c]) / 4.0 * vol;
            all += vol;
        }
        ans = ans / all;
        return ans;
    }//三维凸包重心
    double ptoface(Point3 p, int i) {
        return fabs(
                volume(P[F[i].a], P[F[i].b], P[F[i].c], p) / ((P[F[i].b] - P[F[i].a]) ^ (P[F[i].c] - P[F[i].a])).len()
                );
    }//点到面的距离
}ch;
void solve(){
    ch.create();
    printf("%d\n",ch.polygon());

}
void init(){
    for(int i=1;i<=ch.n;i++)
        ch.P[i].read();
}
