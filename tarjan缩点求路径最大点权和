
vector<int>vec[MAXN];
int stac[MAXN];
int dfn[MAXN];
int low[MAXN];
bool vis[MAXN];
int w[MAXN],sd[MAXN];
int top,tim;
void Tarjan(int now){
    dfn[now]=low[now]=++tim;
    stac[++top]=now;
    vis[now]=true;
    for(auto to:vec[now]){
        if(!dfn[to]){
            Tarjan(to);
            low[now]=min(low[now],low[to]);
        }else if(vis[to]){
            low[now]=min(low[now],low[to]);
        }
    }
    if(dfn[now]==low[now]){
        int y=stac[top--];
        while(y){
            sd[y]=now;
            vis[y]=false;
            if(now==y)break;
            w[now]+=w[y];
            y=stac[top--];
        }
    }
}
vector<int>tp[MAXN];
int in[MAXN];
int dis[MAXN];
int topo(){
    queue<int>q;
    for(int i=1;i<=n;i++){
        if(sd[i]==i&&in[i]==0)
            q.push(i);
        dis[i]=w[i];
    }
    int ret=0;
    while(!q.empty()){
        int now=q.front();q.pop();
        ret=max(ret,dis[now]);
        for(auto to:tp[now]){
            in[to]--;
            dis[to]=max(dis[to],dis[now]+w[to]);
            if(in[to]==0)q.push(to);
        }
    }
    return ret;
}
void solve(){
    for(int i=1;i<=n;i++)
        if(!dfn[i])Tarjan(i);
    for(int i=1;i<=n;i++){
        for(auto to:vec[i]){
            if(sd[i]==sd[to])continue;
            tp[sd[i]].push_back(sd[to]);
            in[sd[to]]++;
        }
    }
    printf("%d\n",topo());
}
void init(){
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++)
        scanf("%d",w+i);
    for(int i=1,u,v;i<=m;i++){
        scanf("%d%d",&u,&v);
        vec[u].push_back(v);
    }
}
