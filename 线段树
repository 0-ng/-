int tree[MAXN<<2];
int tag[MAXN<<2];
void push_up(int rt){
    tree[rt]=tree[rt<<1]+tree[rt<<1|1];
}
void push_down(int l,int r,int rt){
    if(tag[rt]){
        int mid=(l+r)>>1;
        tree[rt<<1]=tag[rt]*(mid-l+1);
        tree[rt<<1|1]=tag[rt]*(r-mid);
        tag[rt<<1]=tag[rt];
        tag[rt<<1|1]=tag[rt];
        tag[rt]=0;
    }
}
void build(int l,int r,int rt){
    if(l==r){
        scanf("%d",&tree[rt]);
        return;
    }
    int mid=(l+r)>>1;
    build(lson);
    build(rson);
    push_up(rt);
}
void update(int L,int R,int val,int l,int r,int rt){
    if(L<=l&&R>=r){
        tree[rt]=val*(r-l+1);
        tag[rt]=val;
        return;
    }
    push_down(l,r,rt);
    int mid=(l+r)>>1;
    if(L<=mid)update(L,R,val,lson);
    if(R>mid)update(L,R,val,rson);
    push_up(rt);
}
int query(int L,int R,int l,int r,int rt){
    if(L<=l&&R>=r){
        return tree[rt];
    }
    push_down(l,r,rt);
    int ret=0;
    int mid=(l+r)>>1;
    if(L<=mid)ret+=query(L,R,lson);
    if(R>mid)ret+=query(L,R,rson);
    return ret;
}
