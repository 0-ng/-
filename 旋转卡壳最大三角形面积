double rotating_calipers_S(Point* stk,int mn){//最大三角形面积
    stk[mn+1]=stk[1];
    int cur=2;
    double ret=0;
    for(int i=1;i<=mn;i++){
        for(int j=i+1;j<=mn;j++){
            Vector v = stk[i]-stk[j];
            while((v^(stk[cur+1]-stk[cur])) < 0)
                cur = (cur%mn+1);
            double tmp=max((stk[cur]-stk[i])^v,(stk[cur+1]-stk[j])^v);
            ret = max(ret,tmp);
        }
    }
    return fabs(ret)/2;
}



-------------------------------↑rubbish
double rota(int n){
    double ret=0;
    int j=2,k=3;
    Vector v;
    for(int i=1;i<=n;i++){
        v=stk[i]-stk[j];
        while((v^(stk[k+1]-stk[k]))<0)
            k=k%n+1;
        ret=max(ret,(stk[k]-stk[j])^v);
        v=stk[i]-stk[k];
        while((v^(stk[j+1]-stk[j]))>0)
            j=j%n+1;
        ret=max(ret,v^(stk[j]-stk[k]));
    }
    return fabs(ret)/2;
}
void solve(){
    if(n<=2){
        printf("0.00\n");
        return;
    }
    int len=Andrew();
    printf("%.2f\n",rota(len));
}
