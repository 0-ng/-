#include<map>
#include<set>
#include<cmath>
#include<queue>
#include<stack>
#include<ctime>
#include<vector>
#include<cstdio>
#include<vector>
#include<string>
#include<bitset>
#include<cstdlib>
#include<iomanip>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;
const int MAXN=1e3+5;
const double EPS=1e-8;
const double PI=acos(-1);
inline int sgn(double a){ return a < -EPS ? -1 : a > EPS; }
inline int cmp(double a, double b){ return sgn(a-b); }
long long mod=1e9+7;
int n,m,T;
struct Point;
struct Point3;
struct Line;
struct Line3;
typedef Point Vector;
typedef Point3 Vector3;

struct Point{
    double x,y;
    Point(){}
    Point(double a, double b):x(a),y(b){}
    double len(){return sqrt(x*x+y*y);}
    double norm(){return x*x+y*y;}
    double disToPoint(Point p){return sqrt((x-p.x)*(x-p.x)+(y-p.y)*(y-p.y));}
    double disToLine(Line l);
    double disToSegment(Line l);
    bool onLine(Line l);
    bool onSegment(Line l);
    Point project(Line l);//投影
    Point symmetryPoint(Line l);
    Vector Normal(){//单位法向量逆时针旋转90
        return Vector(-y/len(),x/len());
    }
    int inPolygon(Point poly[]);//点是否在多边形内部
    void read(){scanf("%lf%lf",&x,&y);}
    Point operator+(const Vector v)const{return {x+v.x,y+v.y};}
    Vector operator-(const Point p)const{return {x-p.x,y-p.y};}
    double operator^(const Vector v)const{return x*v.y-y*v.x;}//叉乘
    double operator*(const Vector v)const{return x*v.x+y*v.y;}//点乘
    Vector operator*(const double d)const{return {x*d,y*d};}
    Vector operator/(const double d)const{return {x/d,y/d};}
    bool operator==(const Point p)const{return cmp(x,p.x)==0&&cmp(y,p.y)==0;}
    bool operator<(const Point p)const{if(cmp(x,p.x)==0) return y<p.y;return x<p.x;}
};
struct Line{
    Line(){}
    Line(Point a,Point b){s=a;e=b;ang=atan2(e.y-s.y,e.x-s.x);}
    Point point(double t){return s + (e - s)*t;}//返回点P = v + (p - v)*t
    bool inter(Line l){
        return
                max(s.x,e.x)>=min(l.s.x,l.e.x)&&
                max(l.s.x,l.e.x)>=min(s.x,e.x)&&
                max(s.y,e.y)>=min(l.s.y,l.e.y)&&
                max(l.s.y,l.e.y)>=min(s.y,e.y)&&
                sgn((l.s-s)^(e-s))*sgn((e-s)^(l.e-s))>=0&&
                sgn((s-l.s)^(l.e-l.s))*sgn((l.e-l.s)^(e-l.s))>=0;
    }//线段与线段
    bool segLineInt(Line l){return sgn((e-s)^(l.e-s))*sgn((e-s)^(l.s-s))<=0;}//直线(主)与线段
    Point operator &(Line &b){
        double t=((s-b.s)^(b.s-b.e))/((s-e)^(b.s-b.e));
        return s+(e-s)*t;
    }
    Point s,e;
    double ang;
};
struct Circle{
    Circle(){}
    Circle(Point cc, double rr):c(cc), r(rr) {}
    Point point(double d){ return Point(c.x + cos(d)*r, c.y + sin(d)*r);}//通过圆心角求坐标
    bool contain(Point p){return cmp(r,c.disToPoint(p))>=0;}
    void read(){scanf("%lf%lf%lf",&c.x,&c.y,&r);}
    Point c;
    double r;
};
double Point::disToLine(Line l){
    Vector v1=l.e-l.s,v2=*this-l.s;
    return fabs((v1^v2))/(v1.len());
}
double Point::disToSegment(Line l){
    if(l.s==l.e) return (*this-l.s).len();
    Vector v1 = l.e-l.s, v2 = *this-l.s, v3 = *this-l.e;
    if(sgn(v1*v2) < 0) return v2.len();
    if(sgn(v1*v3) > 0) return v3.len();
    return disToLine(l);
}
bool Point::onLine(Line l){
    Vector v1=l.s-*this;
    Vector v2=l.e-*this;
    return sgn(v1^v2)==0;
}
bool Point::onSegment(Line l){
    Vector v1=l.s-*this;
    Vector v2=l.e-*this;
    return sgn(v1^v2)==0&&sgn(v1*v2)<=0;
}
Point Point::project(Line l) {//投影 对于给定的三个点p1、p2、p，从点p向通过
//p1、p2的直线引一条垂线，求垂足x的坐标。（点p在直线p1p2上的投影）
    Vector base = l.e - l.s;
    double r = (*this-l.s)*(base)/base.norm();
    return l.s+base*r;
}
int Point::inPolygon(Point poly[]){//判断点是否在多边形内，若点在多边形内返回1，在多边形外部返回0，在多边形上返回-1
    int wn = 0;
    for(int i = 1; i <= n; ++i){
        if(onSegment({poly[i], poly[i%n+1]})) return -1;
        int k = sgn((poly[i%n+1] - poly[i])^(*this - poly[i]));
        int d1 = sgn(poly[i].y - y);
        int d2 = sgn(poly[i%n+1].y - y);
        if(k > 0 && d1 <= 0 && d2 > 0) wn++;
        if(k < 0 && d2 <= 0 && d1 > 0) wn--;
    }
    return (wn != 0);
}
double polygonArea(Point poly[]){//p为端点集合，n为端点个数//多边形有向面积
    double s = 0;
    for(int i = 2; i <= n-1; ++i)
        s += (poly[i]-poly[1])^(poly[i+1]-poly[1]);
    return s;
}

int getLineCircleIntersection(Line L, Circle C, double& t1, double& t2, vector<Point>& sol){//求圆与直线交点
    double a = L.s.x, b = L.e.x - C.c.x, c = L.s.y, d = L.e.y - C.c.y;
    double e = a*a + c*c, f = 2*(a*b + c*d), g = b*b + d*d - C.r*C.r;
    double delta = f*f - 4*e*g;//判别式
    if(sgn(delta) < 0) return 0;//相离
    if(sgn(delta) == 0){//相切
        t1 = -f /(2*e);
        t2 = -f /(2*e);
        sol.push_back(L.point(t1));//sol存放交点本身
        return 1;
    }
    //相交
    t1 = (-f - sqrt(delta))/(2*e);
    sol.push_back(L.point(t1));
    t2 = (-f + sqrt(delta))/(2*e);
    sol.push_back(L.point(t2));
    return 2;
}
pair<Point, Point> getCrossPoints(Circle c, Line l) {
    Vector pr=c.c.project(l);
    Vector e = (l.e - l.s)/(l.e - l.s).len();
    double base = sqrt(c.r * c.r - (pr - c.c).norm() );
    return make_pair(pr + e * base, pr - e * base);
}
double AreaOfOverlap(Point c1, double r1, Point c2, double r2){//两圆相交面积
    double d = (c1 - c2).len();
    if(r1 + r2 < d + EPS) return 0.0;
    if(d < fabs(r1 - r2) + EPS){
        double r = min(r1, r2);
        return PI*r*r;
    }
    double x = (d*d + r1*r1 - r2*r2)/(2.0*d);
    double p = (r1 + r2 + d)/2.0;
    double t1 = acos(x/r1);
    double t2 = acos((d - x)/r2);
    double s1 = r1*r1*t1;
    double s2 = r2*r2*t2;
    double s3 = 2*sqrt(p*(p - r1)*(p - r2)*(p - d));
    return s1 + s2 - s3;
}

Point Point::symmetryPoint(Line l){
    Point q=project(l);
    return Point(2*q.x-x,2*q.y-y);
}//对称点

struct Point3{
    double x,y,z;
    Point3(){}
    Point3(double a, double b, double c):x(a),y(b),z(c){}

    double len(){return sqrt(x*x+y*y+z*z);}
    double norm(){return x*x+y*y+z*z;}
    double disToPoint(Point3 p){return sqrt((x-p.x)*(x-p.x)+(y-p.y)*(y-p.y)+(z-p.z)*(z-p.z));}
    double disToLine(Line3 l);
    double disToSegment(Line3 l);
//    bool onLine(Line l);
//    bool onSegment(Line l);
//    Point project(Line l);//投影
//    Point symmetryPoint(Line l);
//    int inPolygon(Point poly[]);//点是否在多边形内部
    bool dots_inline(Point3 p2,Point3 p3){
        return sgn(((*this-p2)^(p2-p3)).len())==0;
    }//三点共线
    double point_to_plane(Point3 p1,Point3 p2,Point3 p3){
        return fabs(((p1-p2)^(p2-p3))*(*this-p1))/((p1-p2)^(p2-p3)).len();
    }
    void read(){scanf("%lf%lf%lf",&x,&y,&z);}
    Point3 operator+(Vector3 v){return {x+v.x,y+v.y,z+v.z};}
    Vector3 operator-(Point3 p){return {x-p.x,y-p.y,z-p.z};}
    Vector3 operator^(Vector3 v){return {y*v.z-z*v.y,z*v.x-x*v.z,x*v.y-y*v.x};}//叉乘
    double operator*(Vector3 v){return x*v.x+y*v.y+z*v.z;}//点乘
    Vector3 operator*(double d){return {x*d,y*d,z*d};}
    Vector3 operator/(double d){return {x/d,y/d,z/d};}
    bool operator==(Point3 p){return cmp(x,p.x)==0&&cmp(y,p.y)==0&&cmp(z,p.z)==0;}
    bool operator<(Point3 p){if(cmp(x,p.x)==0&&cmp(y,p.y))return z<p.z;else if(cmp(x,p.x))return y<p.y;return x<p.x;}
};

struct Line3{
    Line3(){}
    Line3(Point3 a,Point3 b,double c=0){s=a,e=b;r=c;}
    Point3 point(double t){return s + (e - s)*t;}//返回点P = v + (p - v)*t
    double disToLine(Line3 v){
        Point3 n=((s-e)^(v.s-v.e));
        return fabs(((s-v.s)*n))/n.len();
    }
    //    Point3 getLineIntersection(Line3 l){
//        Vector3 u=s-l.s, v=s-e, w=l.s-l.e;
//        double t=(w^u)/(v^w);
//        return s+v*t;
//    }
//    bool inter(Line3 l){
//        return
//                max(s.x,e.x)>=min(l.s.x,l.e.x)&&
//                max(l.s.x,l.e.x)>=min(s.x,e.x)&&
//                max(s.y,e.y)>=min(l.s.y,l.e.y)&&
//                max(l.s.y,l.e.y)>=min(s.y,e.y)&&
//                sgn((l.s-s)^(e-s))*sgn((e-s)^(l.e-s))>=0&&
//                sgn((s-l.s)^(l.e-l.s))*sgn((l.e-l.s)^(e-l.s))>=0;
//    }//线段与线段
//    bool segLineInt(Line3 l){return sgn((e-s)^(l.e-s))*sgn((e-s)^(l.s-s))<=0;}//直线与线段
//    bool operator&(Line3 l){return sgn((l.s-e)^(s-e))*sgn((l.e-e)^(s-e))<=0;}//直线和直线是否相交
    Point3 s,e;
    double r;
};
double Point3::disToLine(Line3 l){
    Vector3 v1=l.e-l.s,v2=*this-l.s;
    return fabs((v1^v2).len())/(v1.len());
}
double Point3::disToSegment(Line3 l){
    if(l.s==l.e) return (*this-l.s).len();
    Vector3 v1 = l.e-l.s, v2 = *this-l.s, v3 = *this-l.e;
    if(sgn(v1*v2) < 0) return v2.len();
    if(sgn(v1*v3) > 0) return v3.len();
    return disToLine(l);
}
inline double area(Point3 o, Point3 a, Point3 b) {
    return ((o-a)^(o-b)).len();
}//三角形面积*2
inline double volume(Point3 o, Point3 a, Point3 b, Point3 c) {
    return ((o-a)^(o-b))*(c-o) / 6.0;
}
Point p[MAXN];
bool HPIcmp(Line a,Line b) {
    if (fabs(a.ang - b.ang) > EPS)return a.ang < b.ang;
    else return ((a.s - b.s) ^ (b.e - b.s)) < 0;
}
struct halfplanes{
    int n;
    Line line[MAXN];
    Point p[MAXN];
    Line Q[MAXN];
    int head,tail;
    void connect(){
        for(int i=1;i<=n;i++)
            line[i]={p[i],p[i%n+1]};
    }
    bool HPI() {
        sort(line+1, line+n+1, HPIcmp);
        int tot = 1;
        for (int i = 2; i <= n; i++)
            if (fabs(line[i].ang - line[i - 1].ang) > EPS) //去掉斜率重复的
                line[++tot] = line[i];
        head = 1, tail = 2;
        Q[1] = line[1];Q[2] = line[2];
        for (int i = 3; i <= tot; i++) {
            if (fabs((Q[tail].e - Q[tail].s) ^ (Q[tail - 1].e - Q[tail - 1].s)) < EPS ||
                fabs((Q[head].e - Q[head].s) ^ (Q[head + 1].e - Q[head + 1].s)) < EPS)
                return false;
            while (head < tail && (((Q[tail] & Q[tail - 1]) -
                                    line[i].s) ^ (line[i].e - line[i].s)) > EPS)
                tail--;
            while (head < tail && (((Q[head] & Q[head + 1]) -
                                    line[i].s) ^ (line[i].e - line[i].s)) > EPS)
                head++;
            Q[++tail] = line[i];
        }
        while (head < tail && (((Q[tail] & Q[tail - 1]) -
                                Q[head].s) ^ (Q[head].e - Q[head].s)) > EPS)
            tail--;
        while (head < tail && (((Q[head] & Q[head + 1]) -
                                Q[tail].s) ^ (Q[tail].e - Q[tail].s)) > EPS)
            head++;
        if (tail <= head + 1) return false;
        return true;
    }
    void getConvex(Point res[], int &resn){
        resn=0;
        for(int i = head; i < tail; i++)
            res[++resn] = Q[i]&Q[i+1];
        if(head < tail - 1)
            res[++resn] = Q[head]&Q[tail];
    }
}hpi;
bool judge(Point p[],int n) {
    double ans = 0;
    for (int i = 1; i <= n; i++) {
        ans += (p[i] ^ p[i % n + 1]);
    }
    return ans<0;
}
double r;
//旋转卡壳，求两点间距离平方的最大值
Point rotating_calipers(Point p[],int n)
{
    double ans = -1;
    Point v;
    int cur = 2;
    Point a;
    for(int i = 1; i <= n; i++)
    {
        v = p[i]-p[i%n+1];
        while((v^(p[cur%n+1]-p[cur])) < 0)
            cur = cur%n+1;
        if(ans<(p[i]-p[cur]).norm()){
            a.x=i;
            a.y=cur;
            ans=(p[i]-p[cur]).norm();
        }
        if(ans<(p[i%n+1]-p[cur%n+1]).norm()){
            a.x=i%n+1;
            a.y=cur%n+1;
            ans=(p[i%n+1]-p[cur%n+1]).norm();
        }
    }
    return a;
}
void solve(){
    if(hpi.HPI())
        printf("YES\n");
    else
        printf("NO\n");
}
void init(){
    scanf("%d",&hpi.n);
    for(int i=1;i<=hpi.n;i++)
        hpi.p[i].read();
    if(judge(hpi.p,hpi.n))
        reverse(hpi.p+1,hpi.p+hpi.n+1);
    hpi.connect();
}
int main(){
    scanf("%d",&T);
//    T=1;
    while(T--){
//    while(~scanf("%d",&n)&&n){
//    while(~scanf("%d%lf",&hpi.n,&r)){
        init();
        solve();
    }
    return 0;
}
