int dpmx[MAXN][21];
int dpmn[MAXN][21];
int lg[MAXN];
void RMQ(){
    for(int j=1;j<=lg[n];j++){
        for(int i=1;i+(1<<j)-1<=n;i++){
            dpmx[i][j]=max(dpmx[i][j-1],dpmx[i+(1<<(j-1))][j-1]);
            dpmn[i][j]=min(dpmn[i][j-1],dpmn[i+(1<<(j-1))][j-1]);
        }
    }
}
void solve(){
    RMQ();
    int l,r;
    while(m--){
        scanf("%d%d",&l,&r);
        int i=lg[r-l+1];
        int mx=max(dpmx[l][i],dpmx[r-(1<<i)+1][i]);
        int mn=min(dpmn[l][i],dpmn[r-(1<<i)+1][i]);
        printf("%d\n",mx-mn);
    }
}
void init(){
    scanf("%d%d",&n,&m);
    lg[0]=-1;
    for(int i=1;i<=n;i++){
        scanf("%d",&dpmx[i][0]);
        dpmn[i][0]=dpmx[i][0];
        lg[i]=lg[i/2]+1;
    }
}
