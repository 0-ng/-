const double PI=acos(-1.0);
const int MAXN=3e6+10;
struct Complex{
    double x,y;
    Complex(double _x=0.0,double _y=0.0){
        x=_x;y=_y;
    }
    Complex operator-(const Complex &b)const{
        return Complex(x-b.x,y-b.y);
    }
    Complex operator+(const Complex &b)const{
        return Complex(x+b.x,y+b.y);
    }
    Complex operator*(const Complex &b)const{
        return Complex(x*b.x-y*b.y,x*b.y+y*b.x);
    }
};
void change(Complex y[],int len){
    for(int i=1,j=len/2,k;i<len-1;i++){
        if(i<j)swap(y[i],y[j]);
        k=len/2;
        while(j>=k){
            j-=k;
            k/=2;
        }
        if(j<k)j+=k;
    }
}
void fft(Complex y[],int len,int on){
    change(y,len);
    for(int h=2;h<=len;h<<=1){
        Complex wn(cos(-on*2*PI/h),sin(-on*2*PI/h));
        for(int j=0;j<len;j+=h){
            Complex w(1,0);
            for(int k=j;k<j+h/2;k++){
                Complex u=y[k];
                Complex t=w*y[k+h/2];
                y[k]=u+t;
                y[k+h/2]=u-t;
                w=w*wn;
            }
        }
    }
    if(on==-1){
        for(int i=0;i<len;i++)
            y[i].x/=len;
    }
}
char a[MAXN],b[MAXN];
Complex x1[MAXN],x2[MAXN];
int sum[MAXN];
int main(){
    scanf("%s",a);
    scanf("%s",b);
    int len1=strlen(a);
    int len2=strlen(b);
    int len=1;
    while(len<len1*2||len<len2*2)len<<=1;
    for(int i=0;i<len1;i++)x1[i]=Complex(a[len1-i-1]-'0',0);
    for(int i=len1;i<len;i++)x1[i]=Complex(0,0);

    for(int i=0;i<len2;i++)x2[i]=Complex(b[len2-i-1]-'0',0);
    for(int i=len2;i<len;i++)x2[i]=Complex(0,0);

    fft(x1,len,1);fft(x2,len,1);
    for(int i=0;i<len;i++)x1[i]=x1[i]*x2[i];
    fft(x1,len,-1);
    for(int i=0;i<len;i++)
        sum[i]=(int)(x1[i].x+0.5);
    for(int i=0;i<len;i++){
        sum[i+1]+=sum[i]/10;
        sum[i]%=10;
    }
    len=len1+len2+1;
    while(sum[len]<=0&&len>0)len--;
    for(int i=len;i>=0;i--)printf("%d",sum[i]);
    printf("\n");
    return 0 ;
}

-------------------------------------
/*
1 2
1 2
1 2 1
*/
/*
1 4 5 2
*/
const double PI=acos(-1.0);
struct Complex{
    double x,y;
    Complex(double _x=0.0,double _y=0.0){
        x=_x;y=_y;
    }
    Complex operator-(const Complex &b)const{
        return Complex(x-b.x,y-b.y);
    }
    Complex operator+(const Complex &b)const{
        return Complex(x+b.x,y+b.y);
    }
    Complex operator*(const Complex &b)const{
        return Complex(x*b.x-y*b.y,x*b.y+y*b.x);
    }
}a[MAXN],b[MAXN];
int N,M;
int l,r[MAXN];
void fast_fast_tle(Complex *A,int limit,int type)
{
    for(int i=0;i<limit;i++)
        if(i<r[i]) swap(A[i],A[r[i]]);//求出要迭代的序列
    for(int mid=1;mid<limit;mid<<=1)//待合并区间的中点
    {
        Complex Wn( cos(PI/mid) , type*sin(PI/mid) ); //单位根
        for(int R=mid<<1,j=0;j<limit;j+=R)//R是区间的右端点，j表示前已经到哪个位置了
        {
            Complex w(1,0);//幂
            for(int k=0;k<mid;k++,w=w*Wn)//枚举左半部分
            {
                 Complex x=A[j+k],y=w*A[j+mid+k];//蝴蝶效应
                A[j+k]=x+y;
                A[j+mid+k]=x-y;
            }
        }
    }
}
int main()
{
    scanf("%d%d",&N,&M);
    for(int i=0;i<=N;i++) scanf("%lf",&a[i].x);
    for(int i=0;i<=M;i++) scanf("%lf",&b[i].x);
    int limit=1;
    while(limit<=N+M) limit<<=1,l++;
    for(int i=0;i<limit;i++)
        r[i]= ( r[i>>1]>>1 )| ( (i&1)<<(l-1) ) ;
    // 在原序列中 i 与 i/2 的关系是 ： i可以看做是i/2的二进制上的每一位左移一位得来
    // 那么在反转后的数组中就需要右移一位，同时特殊处理一下复数
    fast_fast_tle(a,limit,1);
    fast_fast_tle(b,limit,1);
    for(int i=0;i<=limit;i++) a[i]=a[i]*b[i];
    fast_fast_tle(a,limit,-1);
    for(int i=0;i<=N+M;i++)
        printf("%d ",(int)(a[i].x/limit+0.5));
    return 0;
}
